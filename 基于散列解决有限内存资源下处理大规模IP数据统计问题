---
title: 基于散列解决有限内存资源下处理大规模IP数据统计问题 
tags: 面试
grammar_cjkRuby: true
---

### 问题描述
针对海量的IP信息（10G），型如：

``` stylus
IP	 username	example.com	   字段1	字段2   ...
```
在小内存的条件（256M）下，完成：
1. 对每个IP出现的次数进行统计
2. 对相同IP出现的用户数进行统计
3. 对每个IP记录一次实例

### 解决思路
首先我在路上想到以前学过一个基于散列技术提高Apriori算法效率的例子，回去后查书的思路大概如下，当由候选项集产生频繁项集时，将它们散列到散列表结构中不同的桶中。当对应桶的计数低于支持度阈值的时候显然这个桶里的候选集不可能是频繁的。

因为如果接着思路下去，我需要解决如下问题：

1. 内存不能一次处理所有数据，所以分批处理数据。采用分文件存储，那么我需要将不同IP的记录按一定的规则放到指定的文件中。
2. 因为任务是分批处理的，那么就意味着，我需要打开指定的文件来更新记录。那么我至少要让每个文件中记录的数量尽可能地平均。

到这里我基本确定采用hash函数来解决将IP记录映射到对应的文件思路。
然后我查了一下C++中的相关的hash散列的STL：

``` stylus
引用自：http://blog.csdn.net/u010025211/article/details/46653519

hash_map，首先分配一大片内存，形成许多桶。是利用hash函数，对key进行映射到不同区域（桶）进行保存。其插入过程是：
1、得到key
2、通过hash函数得到hash值
3、得到桶号(一般都为hash值对桶数求模)
4、存放key和value在桶内。

其取值过程是:
1、得到key
2、通过hash函数得到hash值
3、得到桶号(一般都为hash值对桶数求模)
4、比较桶的内部元素是否与key相等，若都不相等，则没有找到。
5、取出相等的记录的value。
```
这里可以把文件当成桶，对IP字段进行散列，散列值当做文件名。然后分批处理数据，每处理完一批就更新一次文件中的记录。
但是我认为普通的hash函数可能对IP的散列效果并不好，主要考虑有如下两点：
1. 如果散列的范围过大，那么产生的文件太多，可以认为效果不好。
2. 尽可能保证每个文件中维护的记录的数量有个上限，分布尽量平均。

那么肯定不能使用普通的hash函数了，百度适用IP的hash函数，看到一篇关于Nginx做负载均衡的函数ip_hash，其中的hash函数思路如下：

``` stylus
引用自：https://www.cnblogs.com/xiaohuo/archive/2012/08/13/2636468.html

1、for循环 i取 012三个值，而ip的点分十进制表示方法将ip分成四段（如：192.168.1.1），但是这里循环时只是将ip的前三个端作为参数加入hash函数。这样做的目的是保证ip地址前三位相同的用户经过hash计算将分配到相同的后端server。

作者的这个考虑是极为可取的，因此ip地址前三位相同通常意味着来着同一个局域网或者相邻区域，使用相同的后端服务让nginx在一定程度上更具有一致性。

2、哈希函数：hash = (hash * 113 + iphp->addr[i]) % 6271
```
剩下的就是解决一些文件操作等相关的逻辑，这里不再赘述。

### 代码实现

``` cpp
#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<map>
#include<set>

using namespace std;

//定义单批次最多处理多少数据
const int maxnum = 500;
string textname = "test.txt";

typedef struct Ipinfo
{
	string ip;
	long count;
	set<string> user;
	string example;

	Ipinfo() {
		count = 0;
		user.clear();
	}

	friend ostream &operator << (ostream &os, const Ipinfo record) {
		os << "Ip:" <<record.ip << " Count:" << record.count << " Users:"
			<< record.user.size() << " Example:" << record.example << endl;
		return os;
	}
}Ipinfo;

map<string, Ipinfo> ipmap;

string iphash(const string& s)
{
	//Nginx的ip_hash
	typedef string::size_type string_size;
	string_size i = 0;
	int time = 3;//只累加IP点分十进制前三位
	int hash = 89;
	while (i != s.size()&&(time--))
	{
		int num = 0;
		while (i != s.size() && s[i] != '.')
		{
			num = num * 10 + (s[i] - '0');
			i++;
		}
		hash = (hash * 113 + num) % 6271;
		if (s[i] == '.') i++;
	}

	return to_string(hash);
}

vector<string> split(const string& s)
{
	//将string分割成vector
	vector<string> ret;
	typedef string::size_type string_size;
	string_size i = 0;

	while (i != s.size())
	{
		while (i != s.size() && isspace(s[i]))
			++i;
		string_size j = i;
		while (j != s.size() && !isspace(s[j]))
			++j;
		if (i != j)
		{
			ret.push_back(s.substr(i, j - i));
			i = j;
		}
	}
	return ret;
}

int findline(const string& locate,const string& key)
{
	//去定位文件中找是否存在记录
	int ret = -1;
	string line;
	ifstream fin(locate.c_str());
	if (fin.is_open())
	{
		while (getline(fin, line))
		{
			vector<string> tmp = split(line);
			if (tmp.size() == 0)
				continue;
			++ret;
			if (key.compare(tmp[0]) == 0) {
				//找到返回行数
				return ret;
			}
		}
	}
	//找不到返回-1
	return -1;
}

void updateline(Ipinfo record,int linenum,const string& locate)
{
	int i = -1;
	string tempStr, line;
	ifstream fin(locate.c_str());
	if (fin.is_open()) {
		cout << "lineNum:"<< linenum << "    lcoate:" << locate << endl;   
		while (getline(fin, line))
		{
			i++;
			if (linenum != i)
			{
				tempStr += line;
			}
			else
			{
				string temp("");
				//更新该行
				vector<string> tmp = split(line);
				if (tmp.size() != 0) {
					//跟新count并合并用户
					record.count += atoi(tmp[1].c_str());
					vector<string>::iterator iter = tmp.begin()+4;
					while (iter != tmp.end())
					{
						record.user.insert(*iter);
						++iter;
					}
					//构造新行
					temp = record.ip + " " + to_string(record.count) + " " + record.example + " " + to_string(record.user.size()) + " ";
					set<string>::iterator newiter = record.user.begin();
					while (newiter != record.user.end())
					{
						temp += *newiter + " ";
						++newiter;
					}
				}
				tempStr += temp;
			}
			tempStr += '\n';
		}
		fin.close();
	}
	ofstream fout(locate.c_str());
	if (fout.is_open()) {
		fout.flush();
		fout << tempStr;
		/*打印跟新内容
		cout << "update content: " << tempStr << endl;*/
		fout.close();
	}
}

void insertline(Ipinfo record,const string& locate)
{
	//向定位文件中插入新行
	ofstream fout(locate.c_str(), ios::app);
	if (fout.is_open())
	{
		fout << record.ip << " " << record.count << " " << record.example << " " << record.user.size() << " ";
		set<string>::iterator iter = record.user.begin();
		while (iter != record.user.end())
		{
			fout << *iter << " ";
			++iter;
		}
		fout << endl;
		/*打印新插入行的内容
		cout << "insert content: " << record.ip << " " << record.count << " " << record.example << " " << record.user.size() << " ";
		set<string>::iterator itercheck = record.user.begin();
		while (itercheck != record.user.end())
		{
			cout << *itercheck << " ";
			++itercheck;
		}
		cout << endl;
		*/
	}
}

int main(int argc, char* argv[])
{
	//cli处理
	if (argc == 2)
	{
		textname = argv[1];
		cout << argv[0] << " uses data from " << textname << endl;
	}
	ifstream fin(textname.c_str());
	if (fin.is_open())
	{
		while (!fin.eof())
		{
			string line;
			long time = maxnum+1;
			while (getline(fin, line) && (time--))
			{
				vector<string> tmp = split(line);
				if (tmp.size() == 0)
					continue;
				map<string, Ipinfo>::iterator iter = ipmap.find(tmp[0]);
				if (iter != ipmap.end())
				{
					//单批次处理找到更新
					iter->second.count++;
					iter->second.user.insert(tmp[1]);
				}
				else {
					//单批次处理没有找到插入
					Ipinfo record;
					record.ip = tmp[0];
					record.count++;
					record.user.insert(tmp[1]);
					record.example = tmp[2];
					ipmap.insert(pair<string, Ipinfo>(record.ip, record));
				}
				tmp.clear();
			}

			//对单批次处理结果进行统计
			for (map<string, Ipinfo>::iterator iter = ipmap.begin();iter != ipmap.end();iter++)
			{
				Ipinfo record = iter->second;
				cout << record << endl;
				//定位本次记录位置
				string locate = iphash(record.ip);
				cout << "locate: " << locate << endl;
				//打开文件，检查是否拥有记录
				int line = findline(locate, record.ip);
				if (line != -1)
				{
					cout << "update file!" << endl;
					updateline(record,line,locate);
				}
				else {
					cout << "insert new line!" << endl;
					insertline(record,locate);
				}

			}
			cout << "|--------------------------------------------------|" << endl;
			ipmap.clear();
		}
	}

}
```
构造输入如下：

![构造数据][1]

对输入的构造考虑如下，同网段不同IP，同IP不同用户，同IP不同实例，IP第三段不同，IP第四段不同，复制多次模拟大量数据。

结果：
可以看到，同网段的IP信息被记录在同一个文件中，IP出现的次数与用户数累计。

![结果1][2]

构造的少量不同网段IP信息被记录在其他文件中：

![结果2][3]

不同的IP信息得到有效的映射存储：

![结果3][4]

程序基本达成目的。

### 参考
> 关于`C++`文件操作资料：C++ Prime Plus
> 关于散列表中hash函数的构造评估：算法导论第11章散列表
> 关于STL中hash_map资料：http://blog.csdn.net/u010025211/article/details/46653519
> 关于Nginx的ip_hash资料：https://www.cnblogs.com/xiaohuo/archive/2012/08/13/2636468.html


  [1]: ./images/1512566485065.jpg "1512566485065.jpg"
  [2]: ./images/1512566738894.jpg "1512566738894.jpg"
  [3]: ./images/1512566947682.jpg "1512566947682.jpg"
  [4]: ./images/1512567047555.jpg "1512567047555.jpg"