---
title: Spring框架总结 
tags: Spring
grammar_cjkRuby: true
---

[toc]

### Spring构架

### Spring特性

#### 松耦合
面向对象的概念，是一个很好的设计来打破系统进入一个组可重用的对象。然而，当系统变大，尤其是在Java项目，庞大的**对象依赖关系**将一直**紧密耦合**引起对象难以管理或修改。在这种情况下，可以使用Spring框架作为一个核心模块轻松高效地管理所有的对象依赖。

> 用一个例子来说明问题

让我们来看一个例子，假设你的项目有一个函数输出的内容，以CSV或JSON格式。采用面向接口编程，那么代码可以如下：

File : IOutputGenerator.java – 输出生成器接口

``` java
package com.yiibai.output;

public interface IOutputGenerator
{
	public void generateOutput();
}
```


File : CsvOutputGenerator.java – 一个CSV输出生成器用来实现IOutputGenerator接口。

``` java
package com.yiibai.output.impl;

import com.yiibai.output.IOutputGenerator;

public class CsvOutputGenerator implements IOutputGenerator
{
	public void generateOutput(){
		System.out.println("Csv Output Generator");
	}
}
```


File : JsonOutputGenerator.java – 一个JSON输出生成器用来实现IOutputGenerator接口。

``` java
package com.yiibai.output.impl;

import com.yiibai.output.IOutputGenerator;

public class JsonOutputGenerator implements IOutputGenerator
{
	public void generateOutput(){
		System.out.println("Json Output Generator");
	}
}
```

> 如何调用实现

- **方式一:直接调用**

正常的方式，直接调用它。

``` java
package com.yiibai.common;

import com.yiibai.output.IOutputGenerator;
import com.yiibai.output.impl.CsvOutputGenerator;

public class App 
{
    public static void main( String[] args )
    {
    	IOutputGenerator output = new CsvOutputGenerator();
    	output.generateOutput();
    }
}
```


**存在问题**
以这种方式，这个**问题是“output”紧密到CsvOutputGenerator耦合**，输出生成的每一个变化可能涉及代码变化。如果此代码分散在你的项目中，输出生成的每一次变化都会让你受苦。

- **方式二：用一个辅助类调用**

可能想创建一个辅助类将所有输出实现在类的内部。

``` java
package com.yiibai.output;

import com.yiibai.output.IOutputGenerator;
import com.yiibai.output.impl.CsvOutputGenerator;

public class OutputHelper
{
	IOutputGenerator outputGenerator;
	
	public OutputHelper(){
		outputGenerator = new CsvOutputGenerator();
	}
	
	public void generateOutput(){
		outputGenerator.generateOutput();
	}
	
}
```


然后通过辅助类调用它：

``` java
package com.yiibai.common;

import com.yiibai.output.OutputHelper;

public class App 
{
    public static void main( String[] args )
    {
    	OutputHelper output = new OutputHelper();
    	output.generateOutput(); 
    }
}
```


**存在问题**
这看起来比之前的更优雅，**只需要管理一个辅助类，但是辅助类仍是紧耦合** CsvOutputGenerator，输出生成的每一个变化仍然涉及小的代码更改。

- **方式三:Spring**

通过Spring来调用它

在这种情况下，Spring 依赖注入(DI)是一个不错的选择。Spring 可以让输出生成松散的耦合到输出发生器。
OutputHelper类更小的修改。

``` java
 
package com.yiibai.output;

import com.yiibai.output.IOutputGenerator;

public class OutputHelper
{
	IOutputGenerator outputGenerator;
	
	public void generateOutput(){
		outputGenerator.generateOutput();
	}
	
	//采用设值注入
	public void setOutputGenerator(IOutputGenerator outputGenerator){
		this.outputGenerator = outputGenerator;
	}
}
```


创建一个 Spring bean 的配置文件，并在这里声明所有的Java对象的依赖。


``` xml
<!-- Spring-Common.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!-- 注册bean并管理依赖关系 -->
	<bean id="OutputHelper" class="com.yiibai.output.OutputHelper">
		<property name="outputGenerator" ref="CsvOutputGenerator" />
	</bean>
	
	<bean id="CsvOutputGenerator" class="com.yiibai.output.impl.CsvOutputGenerator" />
	<bean id="JsonOutputGenerator" class="com.yiibai.output.impl.JsonOutputGenerator" />
		
</beans>
```

通过Spring来调用它

``` javascript
package com.yiibai.common;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.yiibai.output.OutputHelper;

public class App 
{
    public static void main( String[] args )
    {
    	//加载Spring上下文
    	ApplicationContext context = 
    	   new ClassPathXmlApplicationContext(new String[] {"Spring-Common.xml"});

	//获取bean
    	OutputHelper output = (OutputHelper)context.getBean("OutputHelper");
    	output.generateOutput();
    	  
    }
}
```


现在，只需要改变 Spring XML 文件使用不同的输出生成器。只修改 Spring XML 文件而不需要无码修改，这意味着更少的错误。

> 总结

简而言之，通过Spring框架，可以先注册bean，在外部文件中管理bean之间的依赖关系，通过加载外部配置文件，来解决对象的依赖关系。
有了Spring框架 - 这种依赖注入(DI)为对象的依赖关系管理有用的特性，使大型Java项目开发管理中更优雅的，高度灵活和便于维护。

#### IOC控制反转

#### DI依赖注入


#### AOP面向切片编程
