---
title: 扎实算法笔记（1.排序） 
tags: sort
grammar_cjkRuby: true
---

**整理与数据结构与算法分析、算法导论**
**一意専心**

- 这里讨论的排序默认可以在主存内完成，当数据量过大时需要在外部存储介质中完成的排序称为**外部排序**。

- 我们假定数据为整数，或者是存在着偏序关系的数据集。这种条件下称为**基于比较的排序**。

- 排序就是将数据按照排序键（sort key）重新排列成升序或者降序。

- 稳定排序就是键值相等的元素在排序前后的相对位置不变。


一般情况下，考察排序算法需要考虑如下：
1. 复杂度和稳定性。
2. 除保存数据外是否需要考虑需要额外的内存。
3. 输入数据的特征是否会对复杂度产生影响。



[toc]

### 初等排序
- 针对简单排序复杂度，例如冒泡、选择、插入等，有：
> 定理：n个互异数的数组的平均逆序数是`n(n-1)/4`.（反序表证明）
> 定理：通过**交换相邻元素**进行的排序的任何算法平均需要O(n^2)。

#### 插入排序

算法描述：将整个数组视为“已排序部分”和“未排序部分”。
- 将开头元素视为已排序
- 执行如下操作直至未排序部分消失
	1. 取出未排序部分的头元素赋值给v。
	2. 在已排序部分中将所有比v大的元素向后移动一个单位。
	3. 将v插入空位


算法考察：复杂度O(N^2)，稳定排序，输入数据顺序能影响复杂度，优势在于能快速处理相对有序的数据。

算法实现：

``` c++
#include<iostream>

using namespace std;

void trace(int a[],int n)
{
	for(int i=0;i<n;i++)
	{
		if(i>0) cout<<" ";
		cout<<a[i];	
	}
	cout<<endl;
} 

void insertionSort(int a[],int n)
{
	for(int i=1;i<n;i++)
	{
		int v=a[i];
		int j=i-1;
		while(j>=0 && a[j]>v)
		{
			a[j+1]=a[j];
			j--;
		}
		a[j+1]=v;
	}
}   

int main(void)
{
	int n,i,j;
	int a[100];
	
	cin>>n;
	for(int i=0;i<n;i++) 
		cin>>a[i];
		
	trace(a,n);
	insertionSort(a,n);
	trace(a,n);
	
	return 0;
}        
```

#### 冒泡排序

算法描述：同插入排序，也将数组分成“已排序部分”和“未排序部分”。
- 重复执行如下操作，直到数组中不包含顺序相反的相邻元素
	1. 从数组末尾开始依次比较相邻的两个元素，如果逆序则交换位置。 

算法考察：冒泡排序的稳定性取决于比较条件，因为只交换相邻的元素那么当条件是严格小于或者大于时那么就不存在交换那么此时为稳定的排序。算法的复杂度为O(n^2)。
另外，在比较时交换的次数称为逆序数，可以用来衡量数列的错乱程度。

算法实现：

``` c++
#include<iostream>

using namespace std;

void trace(int a[],int n)
{
	for(int i=0;i<n;i++)
	{
		if(i>0) cout<<" ";
		cout<<a[i];	
	}
	cout<<endl;
} 

//这里返回了逆序数 
int bubbleSort(int a[],int n) 
{
	int sw=0;
	for(int i=0;i<n;i++)
	{
		for(int j=n-1;j>i;j--)
		{
			if(a[j]<a[j-1])
			{
				int temp=a[j];
				a[j]=a[j-1];
				a[j-1]=temp;
				
				sw++;
			}
		} 
	} 
	
	return sw;
}

int main(void)
{
	int n,i,j;
	int a[100];
	
	cin>>n;
	for(int i=0;i<n;i++) 
		cin>>a[i];
		
	trace(a,n);
	cout<<"sw= "<<bubbleSort(a,n)<<endl;
	trace(a,n);
	
	return 0;
}        
```

#### 选择排序

算法描述：可以直接这么理解，冒泡是通过比较相邻的两个元素进而交换，那么选择排序就是一步先找到最终交换的值然后进行交换。冒泡排序一轮比较下来的结果正是最值，那么选择排序则省略了两两交换的过程，直接交换。
- 重复执行n-1次下述操作
	1. 找出未排序部分的最小值的位置minj。
	2. 将minj的位置的元素与未排序部分的起始元素交换。

算法考察:复杂度O(n^2)，属于不稳定排序

算法实现：

``` c++
#include<iostream>

using namespace std;

void trace(int a[],int n)
{
	for(int i=0;i<n;i++)
	{
		if(i>0) cout<<" ";
		cout<<a[i];	
	}
	cout<<endl;
} 

void selectSort(int a[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		int min=i;
		for(int j=i+1;j<n;j++)
		{
			if(a[min]>a[j])
			{
				min=j;
			} 
		} 
		int temp=a[min];
		a[min]=a[i];
		a[i]=temp;
	}
} 

int main(void)
{
	int n,i,j;
	int a[100];
	
	cin>>n;
	for(int i=0;i<n;i++) 
		cin>>a[i];
		
	trace(a,n);
	//insertionSort(a,n);
	//cout<<"sw= "<<bubbleSort(a,n)<<endl;
	selectSort(a,n);
	trace(a,n);
	
	return 0;
}        
```
#### 希尔排序
算法描述：又称为**缩小增量排序**，给定增量序列{h}，按增量序列每个h个的元素划分为一组，对每一组分别执行一次插入排序，直至增量为1即可。

默认的**增量序列是{[x=n/2]|x>0&&x=x/2}**，即n/2向下取整。

算法考察：属于**不稳定排序**，平均复杂度**O(n^2)**，复杂度与增量序列有关，最好优化可到O(n^1.2)左右，中小规模数据量时性能好，最坏情况与平均情况差不多。

伪代码：

``` c++
insertionSort(a,n,g)
	for i=g to n-1
		v=a[i]
		j=i-g
		while j>=0 && a[j]>v
			a[j+g]=a[j]
			j=j-g
			cnt++
		a[j+g]=v

shellSort(a,n)
	cnt=0
	G[]={?}//增量序列
	foreach item in G[]
		insertionSort(a,n,item)
```


算法实现：
``` c
void Swap(int& a,int& b)
{
	int tmp;
	tmp=a;
	a=b;
	b=tmp;
}
void ShellSort(int* a, int n)  
{  
    int i,j,gap;  
  
    for (gap=n/2;gap>0;gap/=2)  
        for(i=gap;i<n;i++)  
            for(j=i-gap;j>=0&&a[j]>a[j+gap];j-=gap)  
                Swap(a[j],a[j+gap]);  
}  
```

> 希尔排序性能分析
- 增量序列的选择
① 最后一个增量必须为1；
② 应该尽量避免序列中的值(尤其是相邻的值)互为倍数的情况。
有人通过大量的实验，给出了较好的结果：当n较大时，比较和移动的次数约在nl.25到1.6n1.25之间。
- Shell排序的时间性能优于直接插入排序
①当文件初态基本有序时直接插入排序所需的比较和移动次数均较少。
②当n值较小时，n和  的差别也较小，即直接插入排序的最好时间复杂度O(n)和最坏时间复杂度0(n^2)差别不大。
③在希尔排序开始时增量较大，分组较多，每组的记录数目少，故各组内直接插入较快，后来增量di逐渐缩小，分组数逐渐减少，而各组的记录数目逐渐增多，但由于已经按di-1作为距离排过序，使文件较接近于有序状态，所以新的一趟排序过程也较快。
- 综上，希尔排序由于比较步长从大到小，即**不是基于相邻元素比较**，因而在一定数据规模时，性能可以**突破O(n^2)**。



