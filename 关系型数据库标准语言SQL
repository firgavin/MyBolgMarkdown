---
title: 关系型数据库标准语言SQL
tags: 新建,模板,小书匠
grammar_cjkRuby: true
---
# [01]关系型数据库标准SQL
## SQL概述
SQL(Structured Query Language)即结构化查询语言，是关系数据库的标准语言，SQL是一个通用的、功能极强的关系数据库语言，其功能并不仅仅是查询，当前几乎所有的关系数据库管理系统软件都支持SQL，许多软件厂商对SQL基本命令集还进行了不同程度的扩充和修改。
## SQL特点
它是一个综合的、功能极强同时简洁易学的语言，SQL集数据查询(Data Query)、数据操作(Data Manipulation)、数据定义(Data Definition)和数据库控制(Data Control)功能与一体的，主要特点包括：

> 综合统一：SQL集数据定义DDL、数据操纵语言DML、数据控制语言DCL的功能于一体，语言风格统一，可以独立完成数据库生命周期中的全部活动，包括：定义关系模式、插入数据，建立数据库，对数据库中的数据进行查询和更新，数据库重构和维护、数据安全性、完整性控制。

> 高度非过程化：非关系型数据库的数据操纵语言是面向过程的语言，用过程化语言完成某项请求，必须指定存取路径，而用SQL进行数据操作，只要提出做什么？而无需指明怎么做？因此无需了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。这不但大大减轻了用户负担，而且有利于提高数据独立性。

> 面向集合的操作方式：非关系型数据采用的面向记录的操作方式，操作对象是一条记录，比如查询所有平均成绩在80分以上的学生姓名，用户必须一条一条地的把满足条件的学生记录照出来，而SQL采用几何操作方式，不仅操作对象、查找结果可以是元组的集合，而且一次插入、删除、更新操作的对象也可以是元组的集合。

> 以同一种语法结构提供多种实用方式：SQL即使独立的语言，又是嵌入式语言，作为独立的语言，它能够独立地用联机交互的使用方式，用户可以在终端键盘上直接键入SQL命令对数据库进行操作，作为嵌入式语言，SQL语句能够嵌入到高级语言(C、C++、Java)程序中，供程序员设计程序时使用。

> 语言简洁，易学易用：SQL功能极强，但由于设计巧妙，语言十分简洁，完成核心功能只用了9个动词，如下表所示，SQL接近英语口语，因此容易学习，容易使用。

|  SQL功能   |   动词  |    
| --- | --- | 
|   数据查询  |  SELEECT   |   
|   数据定义  |  CREATE,DROP,ALTER   |     
|   数据操控  |  INSERT,UPDATE,DELETE   |   
|   数据控制  |  GRANT,REVOKE   |

## SQL基本概念
支持SQL的RDBMS同样支持关系数据库三级模式结构，如下图所示，其中外模式对应于视图(View)和部分基本表(Base Table),模式对应于基本表，内模式对应于存储文件(Stored File)。
![enter description here][1]

说明：
用户可以用SQL对基本表和视图进行查询或者其他操作，基本表和视图一样，都是关系。
基本表是本身独立存在的表，在SQL中一个关系就对应一个基本表，一个(或者多个)基本表对应一个存储文件，一个表可以带若干索引，索引也存放在存储文件中。
存储文件的逻辑结构组成了关系数据库的内模式，存储文件的物理结构是任意的，对用户是透明的。
视图是从一个或者几个基本表导出的表，它本身不独立存储在数据库中，即数据库中只存放视图的定义而不存放视图对应的数据，这些数据仍存放在导出的视图的基本表中，因此视图是一个续表，视图在概念上与基本表等同，用户可以在视图上再定义视图。


  [1]: ./images/sql%E6%A8%A1%E5%BC%8F%E5%9B%BE.png "sql模式图.png"